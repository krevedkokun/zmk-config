/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/* |  0 |  1 |  2 |  3 |  4 |    |   |    |  5 |  6 |  7 |  8 |  9 |
   | 10 | 11 | 12 | 13 | 14 |    |   |    | 15 | 16 | 17 | 18 | 19 |
   | 20 | 21 | 22 | 23 | 24 |    |   |    | 25 | 26 | 27 | 28 | 29 |
   |    |    |    |    | 30 | 31 |   | 32 | 33 |    |    |    |    | */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT  0
#define WORKMAN  1
#define NUM      2
#define SYM      3
#define MISC     4
#define CTL      5

&caps_word {
  continue-list = <UNDERSCORE MINUS>;
};

&lt {
  quick-tap-ms = <200>;
  flavor = "tap-preferred";
};

/ {
  combos {
    compatible = "zmk,combos";

    combo_lbkt {
      timeout-ms = <50>;
      key-positions = <5 15>;
      bindings = <&kp LBKT>;
      layers = <0>;
    };

    combo_rbkt {
      timeout-ms = <50>;
      key-positions = <4 14>;
      bindings = <&kp RBKT>;
      layers = <0>;
    };

    combo_semi {
      timeout-ms = <50>;
      key-positions = <15 25>;
      bindings = <&kp P>;
      layers = <0>;
    };

    combo_grave {
      timeout-ms = <50>;
      key-positions = <14 24>;
      bindings = <&kp GRAVE>;
      layers = <0>;
    };

    combo_esc {
      timeout-ms = <50>;
      key-positions = <30 31>;
      bindings = <&kp ESC>;
      layers = <0>;
    };

    combo_del {
      timeout-ms = <50>;
      key-positions = <32 33>;
      bindings = <&kp DEL>;
      layers = <0>;
    };

    combo_caps_word {
      timeout-ms = <50>;
      key-positions = <13 16>;
      bindings = <&caps_word>;
      layers = <0>;
    };
  };

  behaviors {
    hm: homerow_mods {
      label = "HOMEROW_MODS";
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <125>;
      bindings = <&kp>, <&kp>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base_layer {
      bindings = <
	&kp Q      &kp W      &kp E       &kp R       &kp T &kp Y &kp U       &kp I       &kp O        &kp SQT
	&hm LGUI A &hm LALT S &hm LCTRL D &hm LSHFT F &kp G &kp H &hm LSHFT J &hm LCTRL K &hm LALT L   &hm LGUI SEMI
	&kp Z      &hm RALT X &kp C       &kp V       &kp B &kp N &kp M       &kp COMMA   &hm RALT DOT &kp SLASH
	&lt CTL SPC &lt MISC TAB &lt SYM ENTER &lt NUM BSPC
	>;
    };

    workman_hw_layer {
      bindings = <
	&kp Q      &kp D      &kp R       &kp W       &kp B  &kp J &kp F       &kp U       &kp P      &kp SQT
        &hm LGUI A &hm LALT S &hm LCTRL H &hm LSHFT T &kp G  &kp Y &hm LSHFT N &hm LCTRL E &hm LALT O &hm LGUI I
	&kp Z      &kp X      &kp M       &kp C       &kp V  &kp K &kp L       &kp COMMA   &kp DOT    &kp SLASH
	&trans &trans &trans &trans
	>;
    };

    num_layer {
      bindings = <
	&kp EQUAL &kp N7 &kp N8 &kp N9 &trans &trans &trans    &trans    &trans   &trans
	&kp MINUS &kp N4 &kp N5 &kp N6 &trans &trans &kp LSHFT &kp LCTRL &kp LALT &kp LGUI
	&kp BSLH  &kp N1 &kp N2 &kp N3 &trans &trans &trans    &trans    &trans   &trans
	&kp N0 &trans &trans &trans
	>;
    };

    sym_layer {
      bindings = <
	&kp PLUS  &kp AMPS &kp ASTRK &kp LPAR  &kp RPAR &trans &trans    &trans    &trans   &trans
	&kp UNDER &kp DLLR &kp PRCNT &kp CARET &trans   &trans &kp LSHFT &kp LCTRL &kp LALT &kp LGUI
	&kp PIPE  &kp EXCL &kp AT    &kp HASH  &trans   &trans &trans    &trans    &trans   &trans
	&trans &trans &trans &trans
	>;
    };

    misc_layer {
      bindings = <
	&trans   &trans   &trans    &trans    &trans &to DEFAULT &to WORKMAN &trans       &trans &trans
	&kp LGUI &kp LALT &kp LCTRL &kp LSHFT &trans &trans      &kp CAPS    &kp LS(CAPS) &trans &trans
	&trans   &trans   &trans    &trans    &trans &trans      &trans      &trans       &trans &trans
	&trans &trans &trans &trans
	>;
    };

    ctrl_layer {
      bindings = <
	&trans &trans &trans &trans &bootloader   &bootloader &trans       &trans       &trans       &trans
	&trans &trans &trans &trans &sys_reset    &sys_reset  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3
	&trans &trans &trans &trans &trans        &trans      &out OUT_TOG &bt BT_CLR   &trans       &trans
	&trans &trans &trans &trans
	>;
    };

  };
};

/* Local Variables: */
/* mode: c */
/* End: */
