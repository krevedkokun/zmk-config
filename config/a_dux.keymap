/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* |  0 |  1 |  2 |  3 |  4 |    |   |    |  5 |  6 |  7 |  8 |  9 |
   | 10 | 11 | 12 | 13 | 14 |    |   |    | 15 | 16 | 17 | 18 | 19 |
   | 20 | 21 | 22 | 23 | 24 |    |   |    | 25 | 26 | 27 | 28 | 29 |
   |    |    |    |    | 30 | 31 |   | 32 | 33 |    |    |    |    | */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT  0
#define WORKMAN  1
#define NUM      2
#define SYM      3
#define MISC     4
#define CTL      5

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&lt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_lbkt {
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&kp LBKT>;
            layers = <0>;
        };

        combo_rbkt {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&kp RBKT>;
            layers = <0>;
        };

        combo_semi {
            timeout-ms = <50>;
            key-positions = <15 25>;
            bindings = <&kp P>;
            layers = <0>;
        };

        combo_grave {
            timeout-ms = <50>;
            key-positions = <14 24>;
            bindings = <&kp GRAVE>;
            layers = <0>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&kp ESC>;
            layers = <0>;
        };

        combo_del {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&kp DEL>;
            layers = <0>;
        };

        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&caps_word>;
            layers = <0>;
        };
    };

    behaviors {
        rhm: rhm {
            compatible = "zmk,behavior-hold-tap";
            label = "RHM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 11 13 14 20 21 22 23 24 30 31 4 3 2 12 1 32 33>;
        };

        lhm: lhm {
            compatible = "zmk,behavior-hold-tap";
            label = "LHM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 30 31>;
            hold-trigger-on-release;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp Q        &kp W        &kp E         &kp R          &kp T                                       &kp Y         &kp U          &kp I         &kp O          &kp SQT
&lhm LGUI A  &lhm LALT S  &lhm LCTRL D  &lhm LSHIFT F  &kp G                                       &kp H         &rhm LSHIFT J  &rhm LCTRL K  &rhm LALT L    &rhm LGUI SEMI
&kp Z        &lhm RALT X  &kp C         &kp V          &kp B                                       &kp N         &kp M          &kp COMMA     &rhm RALT DOT  &kp SLASH
                                                       &lt CTL SPC  &lt MISC TAB    &lt SYM ENTER  &lt NUM BSPC
            >;
        };

        workman_hw_layer {
            bindings = <
&kp Q        &kp D        &kp R         &kp W         &kp B                     &kp J   &kp F         &kp U         &kp P        &kp SQT
&lhm LGUI A  &lhm LALT S  &lhm LCTRL H  &lhm LSHFT T  &kp G                     &kp Y   &rhm LSHFT N  &rhm LCTRL E  &rhm LALT O  &rhm LGUI I
&kp Z        &kp X        &kp M         &kp C         &kp V                     &kp K   &kp L         &kp COMMA     &kp DOT      &kp SLASH
                                                      &trans  &trans    &trans  &trans
            >;
        };

        num_layer {
            bindings = <
&kp EQUAL  &kp N7  &kp N8  &kp N9  &trans                    &trans  &trans     &trans     &trans    &trans
&kp MINUS  &kp N4  &kp N5  &kp N6  &kp N0                    &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
&kp BSLH   &kp N1  &kp N2  &kp N3  &trans                    &trans  &trans     &trans     &trans    &trans
                                   &trans  &trans    &trans  &trans
            >;
        };

        sym_layer {
            bindings = <
&kp PLUS   &kp AMPS  &kp ASTRK  &kp LPAR   &kp RPAR                        &trans  &trans     &trans     &trans    &trans
&kp UNDER  &kp DLLR  &kp PRCNT  &kp CARET  &kp CAPS                        &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
&kp PIPE   &kp EXCL  &kp AT     &kp HASH   &kp LS(CAPS)                    &trans  &trans     &trans     &trans    &trans
                                           &trans        &trans    &trans  &trans
            >;
        };

        nav_layer {
            bindings = <
&trans    &trans    &trans     &trans     &trans                    &trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC
&kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans                    &trans  &kp LEFT           &kp DOWN         &kp UP                &kp RIGHT
&trans    &trans    &trans     &trans     &trans                    &trans  &kp HOME           &kp PAGE_DOWN    &kp PAGE_UP           &kp END
                                          &trans  &trans    &trans  &trans
            >;
        };

        ctrl_layer {
            bindings = <
&trans  &trans  &trans  &trans  &bootloader                    &bootloader  &to 0          &to 1          &trans         &trans
&trans  &trans  &trans  &trans  &sys_reset                     &sys_reset   &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &bt BT_SEL 3
&trans  &trans  &trans  &trans  &trans                         &bt BT_CLR   &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &bt BT_DISC 3
                                &trans       &trans    &trans  &trans
            >;
        };
    };
};

/* Local Variables: */
/* mode: c */
/* End: */
